# Project Euler. Problem 1

count = 0
for i in range(1, 1000):
    if i % 3 == 0 or i % 5 == 0:
        count += i

print(count)

# Project Euler. Problem 2

fib_nums = [1, 2]
i = 1
fib = 0
while fib < 4000000:
    fib = fib_nums[i] + fib_nums[(i - 1)]
    fib_nums.append(fib)
    i += 1
count = 0
for i in fib_nums:
    if i % 2 == 0:
        count += i
print(count)

# Project Euler. Problem 3.

num, aux = 600851475143, 2
while num != 1:
    if not num % aux:
        num /= aux
        print(num)
    else:
        aux+=1
print(aux)

# Project Euler. Problem 4.

def isPalindrome(arg1, arg2):
    total = arg1 * arg2
    tot = str(total)
    return tot == tot[::-1]
def palindrome(low, high):
    palind = 0
    for i in range(low, high):
        for k in range(low, high):
            if isPalindrome(i, k) and palind < i * k:
                palind = i * k
    return palind

print(palindrome(100, 1000))

# Projext Euler. Problem 5

for i in range(2520, 1000000000, 2520):
    count = 0
    for j in range(1, 21):
        if i % j == 0:
            count += 1

    if count == 20:
        print(i)
        break

# Project Euler. Problem 6

def squares(arg):
    numbers = [i for i in range(1, arg + 1)]
    sum_of_sq = 0
    sq_of_sum = (sum(numbers)) ** 2
    for k in numbers:
        sum_of_sq += k ** 2
    return sq_of_sum - sum_of_sq

num = int(input())
print(squares(num))

# Project Euler. Problem 7

def isPrime(num):
    for i in range(2, num):
        if num % i == 0:
            return False
    return True

first = 3
counter = 2
while counter <= 10001:
    if isPrime(first):
        counter += 1
        first += 2
    else:
        first += 1

print(first - 2)

# Project Euler. Problem 8

def adjacent(num, sp):
    lst_int = [int(i) for i in sp]
    maximum = 0
    for j in range(len(lst_int) - num - 1):
        total = 1
        for k in lst_int[j: j + 13]:
            total *= k
        if maximum < total:
            maximum = total
    print(maximum)


s1 = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843'
s2 = '8586156078911294949545950173795833195285320880551112540698747158523863050715693290963295227443043557'
s3 = '6689664895044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749'
s4 = '3035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776'
s5 = '6572733300105336788122023542180975125454059475224352584907711670556013604839586446706324415722155397'
s6 = '5369781797784617406495514929086256932197846862248283972241375657056057490261407972968652414535100474'
s7 = '8216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586'
s8 = '1786645835912456652947654568284891288314260769004224219022671055626321111109370544217506941658960408'
s9 = '0719840385096245544436298123098787992724428490918884580156166097919133875499200524063689912560717606'
s10 = '0588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'

s = s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10

counter = int(input())

adjacent(counter, s)

# Project Euler. Problem 9

for a in range(1,1000):
    for b in range(a):
        c = 1000 - a - b
        if a ** 2 + b ** 2 == c ** 2:
            print(a * b * c)
            
# Project Euler. Problem 10

def isPrime(num):
    for i in range(2, num):
        if num % i == 0:
            return False
    return True
def spisok(num):
    return sum([i for i in range(2, num) if isPrime(i)])

print(spisok(2000000))

# Project Euler Problem 11
# What is the greatest product of four adjacent numbers in the same direction
# (up, down, left, right, or diagonally) in the 20×20 grid?

nnums_matrix = [[8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8],
               [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0],
               [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65],
               [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91],
               [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],
               [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],
               [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],
               [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21],
               [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],
               [21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95],
               [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92],
               [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57],
               [86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],
               [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40],
               [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],
               [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],
               [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36],
               [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16],
               [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54],
               [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]]

# Function only for this matrix
def maximum_product(arg):
    maximum = 0
    for i in range(20):
        for k in range(17):
            product_line = 1  # ПОдсчет слева - направо (From left to right)
           for j in  range(4):
                product_line *= arg[i][k + j]
           if product_line > maximum:
                maximum = product_line
    for i in range(17):
        for k in range(17):
            product_diag_left = 1  # Подсчет слева - направо диагональ (From left to right diagonal)
            for j in range(4):
                product_diag_left *= arg[i + j][k + j]
            if product_diag_left > maximum:
                maximum = product_diag_left


print(maximum_product(nums_matrix))

# Project Euler. Problem 12

def div(num):
    s = (round(num**0.5)**2 == num) + 2
    for i in range(2, int(num ** 0.5)):
        if not num%i:
            s+=2
    return s
c = s = 1
while div(s) <= 500:
    c += 1
    s += c
print(s)

# Project Euler Problem 13

digits = [int(input()) for _ in range(100)]
total_sum = str(sum(digits))
print(total_sum[:10])

