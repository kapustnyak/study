# Project Euler. Problem 1

count = 0
for i in range(1, 1000):
    if i % 3 == 0 or i % 5 == 0:
        count += i

print(count)

# Project Euler. Problem 2

fib_nums = [1, 2]
i = 1
fib = 0
while fib < 4000000:
    fib = fib_nums[i] + fib_nums[(i - 1)]
    fib_nums.append(fib)
    i += 1
count = 0
for i in fib_nums:
    if i % 2 == 0:
        count += i
print(count)

# Project Euler. Problem 3.

num, aux = 600851475143, 2
while num != 1:
    if not num % aux:
        num /= aux
        print(num)
    else:
        aux+=1
print(aux)

# Project Euler. Problem 4.

def isPalindrome(arg1, arg2):
    total = arg1 * arg2
    tot = str(total)
    return tot == tot[::-1]
def palindrome(low, high):
    palind = 0
    for i in range(low, high):
        for k in range(low, high):
            if isPalindrome(i, k) and palind < i * k:
                palind = i * k
    return palind

print(palindrome(100, 1000))

# Projext Euler. Problem 5

for i in range(2520, 1000000000, 2520):
    count = 0
    for j in range(1, 21):
        if i % j == 0:
            count += 1

    if count == 20:
        print(i)
        break

# Project Euler. Problem 6

def squares(arg):
    numbers = [i for i in range(1, arg + 1)]
    sum_of_sq = 0
    sq_of_sum = (sum(numbers)) ** 2
    for k in numbers:
        sum_of_sq += k ** 2
    return sq_of_sum - sum_of_sq

num = int(input())
print(squares(num))

# Project Euler. Problem 7

def isPrime(num):
    for i in range(2, num):
        if num % i == 0:
            return False
    return True

first = 3
counter = 2
while counter <= 10001:
    if isPrime(first):
        counter += 1
        first += 2
    else:
        first += 1

print(first - 2)

# Project Euler. Problem 8

def adjacent(num, sp):
    lst_int = [int(i) for i in sp]
    maximum = 0
    for j in range(len(lst_int) - num - 1):
        total = 1
        for k in lst_int[j: j + 13]:
            total *= k
        if maximum < total:
            maximum = total
    print(maximum)


s1 = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843'
s2 = '8586156078911294949545950173795833195285320880551112540698747158523863050715693290963295227443043557'
s3 = '6689664895044524452316173185640309871112172238311362229893423380308135336276614282806444486645238749'
s4 = '3035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776'
s5 = '6572733300105336788122023542180975125454059475224352584907711670556013604839586446706324415722155397'
s6 = '5369781797784617406495514929086256932197846862248283972241375657056057490261407972968652414535100474'
s7 = '8216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586'
s8 = '1786645835912456652947654568284891288314260769004224219022671055626321111109370544217506941658960408'
s9 = '0719840385096245544436298123098787992724428490918884580156166097919133875499200524063689912560717606'
s10 = '0588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'

s = s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10

counter = int(input())

adjacent(counter, s)

# Project Euler. Problem 9

for a in range(1,1000):
    for b in range(a):
        c = 1000 - a - b
        if a ** 2 + b ** 2 == c ** 2:
            print(a * b * c)
            
# Project Euler. Problem 10
